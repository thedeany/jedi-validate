[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/i18n/jedi-validate-i18n.js",
    "content": "const defaultDictionary = require('./jedi-validate-i18n-data.json');\n\n/**\n * Dictionary for translation\n */\nexport default class Dictionary {\n    /**\n     * Dictionary store\n     * @type {Object}\n     */\n    dictionary = {};\n\n    /**\n     * Default language\n     * @type {string}\n     */\n    defaultLanguage = 'en';\n\n    /**\n     * Dictionary\n     * @param {Object} translations\n     */\n    constructor(translations) {\n        this.addTranslations(defaultDictionary);\n        this.addTranslations(translations);\n    }\n\n    /**\n     * Translate phrase\n     * @param {string} text - phrase to translate\n     * @param {string} language - language token\n     * @returns {string} - translated text\n     */\n    translate(text, language = this.defaultLanguage) {\n        return (this.dictionary[language] && this.dictionary[language][text]) || text;\n    }\n\n    /**\n     * Add translation pair to dictionary\n     * @param {string} sourceText - phrase\n     * @param {string} translatedText - translated phrase\n     * @param {string} language - language token\n     */\n    addTranslation(sourceText, translatedText, language = this.defaultLanguage) {\n        if (this.dictionary[language] === undefined) {\n            this.dictionary[language] = {};\n        }\n\n        this.dictionary[language][sourceText] = translatedText;\n    }\n\n    /**\n     * Add translations to dictionary\n     * @param {Object} translations\n     */\n    addTranslations(translations) {\n        Object.keys(translations).forEach((language) => {\n            Object.keys(translations[language]).forEach((translation) => {\n                this.addTranslation(\n                    translation,\n                    translations[language][translation],\n                    language,\n                );\n            });\n        });\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/dmitriytat/jedi-validate/src/i18n/jedi-validate-i18n.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "defaultDictionary",
    "memberof": "src/i18n/jedi-validate-i18n.js",
    "static": true,
    "longname": "src/i18n/jedi-validate-i18n.js~defaultDictionary",
    "access": "public",
    "export": false,
    "importPath": "jedi-validate/src/i18n/jedi-validate-i18n.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "Dictionary",
    "memberof": "src/i18n/jedi-validate-i18n.js",
    "static": true,
    "longname": "src/i18n/jedi-validate-i18n.js~Dictionary",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/i18n/jedi-validate-i18n.js",
    "importStyle": "Dictionary",
    "description": "Dictionary for translation",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "dictionary",
    "memberof": "src/i18n/jedi-validate-i18n.js~Dictionary",
    "static": false,
    "longname": "src/i18n/jedi-validate-i18n.js~Dictionary#dictionary",
    "access": "public",
    "description": "Dictionary store",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "defaultLanguage",
    "memberof": "src/i18n/jedi-validate-i18n.js~Dictionary",
    "static": false,
    "longname": "src/i18n/jedi-validate-i18n.js~Dictionary#defaultLanguage",
    "access": "public",
    "description": "Default language",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/i18n/jedi-validate-i18n.js~Dictionary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/i18n/jedi-validate-i18n.js~Dictionary#constructor",
    "access": "public",
    "description": "Dictionary",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "translations",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "translate",
    "memberof": "src/i18n/jedi-validate-i18n.js~Dictionary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/i18n/jedi-validate-i18n.js~Dictionary#translate",
    "access": "public",
    "description": "Translate phrase",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - translated text"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "phrase to translate"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "language token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "translated text"
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "addTranslation",
    "memberof": "src/i18n/jedi-validate-i18n.js~Dictionary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/i18n/jedi-validate-i18n.js~Dictionary#addTranslation",
    "access": "public",
    "description": "Add translation pair to dictionary",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceText",
        "description": "phrase"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "translatedText",
        "description": "translated phrase"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "language token"
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "addTranslations",
    "memberof": "src/i18n/jedi-validate-i18n.js~Dictionary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/i18n/jedi-validate-i18n.js~Dictionary#addTranslations",
    "access": "public",
    "description": "Add translations to dictionary",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "translations",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/index.js",
    "content": "import JediValidate from './jedi-validate';\n\nmodule.exports = JediValidate;\n",
    "static": true,
    "longname": "/home/travis/build/dmitriytat/jedi-validate/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/jedi-validate.js",
    "content": "import deepmerge from 'deepmerge';\nimport { getData, getInputData, getValueByName } from './lib/get-data';\nimport { convertData } from './lib/convert-data';\nimport Dictionary from './i18n/jedi-validate-i18n';\nimport { getFormOptions, getInputRules } from './lib/get-options';\nimport { validateData, validateField } from './lib/validate-data';\nimport { ajax } from './lib/ajax';\nimport { markField, initErrorMessages } from './lib/utils';\nimport defaultMethods from './lib/methods';\n\n/**\n * JediValidate - validation\n */\nexport default class JediValidate {\n    /**\n     * Object with fields\n     * @private\n     * @type {Object.<string, Element>}\n     */\n    fields = {};\n    /**\n     * Object with inputs nodes\n     * @private\n     * @type {Object.<string, HTMLInputElement|HTMLSelectElement|Array>}\n     */\n    inputs = {};\n    /**\n     * Object with message nodes\n     * @private\n     * @type {Object.<string, Element>}\n     */\n    messages = {};\n    /**\n     * Object with error message\n     * @private\n     * @type {Object.<string, Object.<string, string>>}\n     */\n    errorMessages = {};\n    /**\n     * Object with error message\n     * @private\n     * @type {object} - data object\n     */\n    data = {};\n    /**\n     * Validate methods\n     * @private\n     * @type {Object.<string, {func: Function, message: string}>}\n     */\n    methods = { ...defaultMethods };\n    /* eslint-disable */\n    /**\n     * Validator options\n     * @private\n     * @type {{ajax: {url: string, enctype: string, sendType: string, method: string}, rules: {}, messages: {}, containers: {parent: string, message: string, baseMessage: string}, states: {error: string, valid: string, pristine: string, dirty: string}, formStatePrefix: string, callbacks: {success: function, error: function}, clean: boolean, redirect: boolean, language: string, translations: {}}}\n     */\n    options = {};\n    /* eslint-enable */\n    /**\n     * Validator rules\n     * @private\n     * @type {object}\n     */\n    rules = {};\n\n    /**\n     * Translation dictionary\n     * @private\n     * @type {Dictionary}\n     */\n    dictionary = null;\n\n    /**\n     * Elements\n     * @private\n     * @type {object}\n     */\n    nodes = null;\n\n    /**\n     * Root element\n     * @private\n     * @type {Element}\n     */\n    root = null;\n\n    /**\n     * JediValidate\n     * @param {HTMLElement} root - element which wrap form element\n     * @param {object} options - object with options\n     */\n    constructor(root, options = {}) {\n        const defaultOptions = {\n            ajax: {\n                url: null,\n                enctype: 'application/x-www-form-urlencoded',\n                sendType: 'serialize', // 'serialize', 'formData', 'json'\n                method: 'GET',\n            },\n            rules: {},\n            messages: {},\n            containers: {\n                parent: 'form-group',\n                message: 'help-block',\n                baseMessage: 'base-error',\n            },\n            states: {\n                error: 'error',\n                valid: 'valid',\n                pristine: 'pristine',\n                dirty: 'dirty',\n            },\n            formStatePrefix: 'jedi-',\n            callbacks: {\n                success({ event, response }) { // eslint-disable-line no-unused-vars\n                },\n                error({ errors }) { // eslint-disable-line no-unused-vars\n                },\n            },\n            clean: true,\n            redirect: true,\n            language: 'en',\n            translations: {},\n        };\n\n        this.root = root;\n\n        this.options = deepmerge(defaultOptions, options);\n\n        this.nodes = {\n            form: this.root.querySelector('form'),\n            inputs: this.root.querySelectorAll('form [name]'),\n            baseMessage: this.root.querySelector(`.${this.options.containers.baseMessage}`),\n        };\n\n        const formOptions = getFormOptions(this.nodes.form);\n\n        this.options = deepmerge(this.options, defaultOptions);\n        this.options = deepmerge(this.options, formOptions);\n        this.options = deepmerge(this.options, options);\n\n        this.rules = { ...this.options.rules };\n\n        this.dictionary = new Dictionary(this.options.translations);\n\n        this.ready();\n\n        this.errorMessages = initErrorMessages(\n            this.rules,\n            this.options.messages,\n            this.methods,\n        );\n    }\n\n    /**\n     * Ready\n     * @private\n     */\n    ready() {\n        this.nodes.form.setAttribute('novalidate', 'novalidate');\n\n        this.nodes.form.addEventListener('submit', this.handleSubmit);\n\n        this.nodes.inputs.forEach((input) => {\n            // fixme \"name\" and \"name in data\" not the same\n            // name === \"phone[]\",\n            // data: { phone: [] } - name === \"phone\"\n            const name = input.name; // eslint-disable-line prefer-destructuring\n\n            if (this.inputs[name]) {\n                if (Array.isArray(this.inputs[name])) {\n                    this.inputs[name].push(input);\n                } else {\n                    const groupInput = [this.inputs[name], input];\n                    groupInput.name = name;\n                    this.inputs[name] = groupInput;\n                }\n            } else {\n                this.inputs[name] = input;\n\n                let field = input.parentNode;\n\n                do {\n                    if (field.classList.contains(this.options.containers.parent)) {\n                        this.fields[name] = field;\n                        break;\n                    }\n\n                    field = field.parentNode;\n                } while (field && field.classList);\n\n                if (!this.fields[name]) {\n                    console.warn(`Input ${name} has no parent field`);\n                    delete this.inputs[name];\n                    return;\n                }\n\n                this.fields[name].classList.add(this.options.states.pristine);\n\n                const messageElement = this.fields[name].querySelector(`.${this.options.containers.message}`);\n\n                if (messageElement) {\n                    this.messages[name] = messageElement;\n                } else {\n                    this.messages[name] = document.createElement('div');\n                    this.messages[name].classList.add(this.options.containers.message);\n                    this.fields[name].appendChild(this.messages[name]);\n                }\n\n                this.rules[name] = this.rules[name] || {};\n                const inputRules = getInputRules(input);\n                this.rules[name] = deepmerge(inputRules, this.rules[name]);\n\n                Object.keys(this.rules[name]).forEach((rule) => {\n                    if (this.rules[name][rule]) {\n                        this.fields[name].classList.add(rule);\n                    }\n                });\n            }\n\n            input.addEventListener('change', this.handleInputChange.bind(this, name));\n            input.addEventListener('input', this.handleInputInput.bind(this, name));\n        });\n    }\n\n    /**\n     * Handle input change\n     * @private\n     * @param {string} name\n     */\n    handleInputChange(name) {\n        this.fields[name].classList.remove(this.options.states.dirty);\n\n        const inputData = getInputData(this.inputs[name]);\n        const value = getValueByName(name, inputData);\n\n        // fixme don't work with 2 inputs phone[]\n        this.data = {\n            ...this.data,\n            ...inputData,\n        };\n\n        const errors = validateField(\n            this.rules[name],\n            this.methods,\n            value,\n            name,\n            this.errorMessages,\n            this.data,\n            this.translate,\n        );\n\n        markField(\n            this.fields[name],\n            this.messages[name],\n            this.options.states,\n            errors,\n        );\n    }\n\n    /**\n     * Handle input\n     * @private\n     * @param {string} name\n     */\n    handleInputInput(name) {\n        this.fields[name].classList.remove(this.options.states.pristine);\n        this.fields[name].classList.add(this.options.states.dirty);\n    }\n\n    /**\n     * Handle form submit\n     * @private\n     * @param {Event} event\n     */\n    handleSubmit = (event) => {\n        this.data = getData(this.inputs);\n\n        const errors = validateData(\n            this.rules,\n            this.methods,\n            this.data,\n            this.errorMessages,\n            this.translate,\n        );\n\n        const fieldNames = Object.keys(errors).filter(name => this.fields[name]);\n\n        if (fieldNames.length !== 0) {\n            fieldNames.forEach(name =>\n                markField(\n                    this.fields[name],\n                    this.messages[name],\n                    this.options.states,\n                    errors[name],\n                ));\n        }\n\n        const errorFieldNames = fieldNames.filter(name => errors[name]);\n\n        if (errorFieldNames.length !== 0) {\n            try {\n                this.options.callbacks.error({ errors });\n            } catch (e) {\n                console.error(e);\n            }\n\n            event.preventDefault();\n            return;\n        }\n\n        if (this.options.ajax && this.options.ajax.url) {\n            event.preventDefault();\n        } else {\n            try {\n                this.options.callbacks.success({ event });\n            } catch (e) {\n                console.error(e);\n            }\n\n            return;\n        }\n\n        const convertedData = convertData(this.data, this.options.ajax.sendType);\n        this.send({\n            ...this.options.ajax,\n            data: convertedData,\n        });\n    };\n\n    /**\n     * Translate\n     * @private\n     * @param {string} text - text to translate\n     */\n    translate = text => this.dictionary.translate(text, this.options.language);\n\n    /**\n     * Send form\n     * @private\n     * @param {object} options - object with options for sending\n     * @param {string} options.url\n     * @param {string} options.enctype\n     * @param {string} options.sendType\n     * @param {string} options.method\n     * @param {string|FormData} options.data\n     */\n    send(options) {\n        ajax(options, this.translate).then((response) => {\n            if (response.validationErrors) {\n                try {\n                    this.options.callbacks.error({ errors: response.validationErrors });\n                } catch (e) {\n                    console.error(e);\n                }\n\n                if (response.validationErrors.base) {\n                    this.nodes.baseMessage.innerHTML = response.validationErrors.base.join(', ');\n                    this.root.classList.add(this.options.formStatePrefix + this.options.states.error); // eslint-disable-line max-len\n                    this.root.classList.remove(this.options.formStatePrefix + this.options.states.valid); // eslint-disable-line max-len\n                    delete response.validationErrors.base; // eslint-disable-line no-param-reassign\n                } else {\n                    this.nodes.baseMessage.innerHTML = '';\n                }\n\n                Object.keys(response.validationErrors).forEach(name =>\n                    markField(\n                        this.fields[name],\n                        this.messages[name],\n                        this.options.states,\n                        response.validationErrors[name],\n                    ));\n            } else {\n                try {\n                    this.options.callbacks.success({ response });\n                } catch (e) {\n                    console.error(e);\n                }\n\n                if (this.options.redirect && response.redirect) {\n                    window.location.href = response.redirect;\n                    return;\n                }\n\n                if (this.options.clean) {\n                    this.nodes.form.reset();\n                }\n            }\n        }).catch(({\n            method, url, status, statusText,\n        }) => {\n            console.warn(`${method} ${url} ${status} (${statusText})`);\n\n            this.nodes.baseMessage.innerHTML = this.translate('Can not send form!');\n            this.root.classList.add(this.options.formStatePrefix + this.options.states.error); // eslint-disable-line max-len\n            this.root.classList.remove(this.options.formStatePrefix + this.options.states.valid); // eslint-disable-line max-len\n        });\n    }\n\n    /**\n     * Collect data\n     * @public\n     * @param {string|Array.<string>} params - field\n     * @returns {Object}\n     */\n    collect(params = '') {\n        if (!params) {\n            this.data = getData(this.inputs);\n\n            return this.data;\n        }\n\n        if (Array.isArray(params)) {\n            return params.reduce((collected, name) => {\n                const inputData = getInputData(this.inputs[name]);\n\n                this.data = {\n                    ...this.data,\n                    ...inputData,\n                };\n\n                return {\n                    ...collected,\n                    ...inputData,\n                };\n            }, {});\n        }\n\n        const inputData = getInputData(this.inputs[params]);\n\n        // fixme don't work with 2 inputs phone[]\n        this.data = {\n            ...this.data,\n            ...inputData,\n        };\n\n        return inputData;\n    }\n\n    /**\n     * Add rule to validator\n     * @public\n     * @param {string} rule - rule name\n     * @param {Function} func - function\n     * @param {string} message - error message\n     */\n    addMethod(rule, func, message) {\n        this.methods[rule] = {\n            func,\n            message,\n        };\n\n        this.errorMessages = initErrorMessages(\n            this.rules,\n            this.options.messages,\n            this.methods,\n        );\n    }\n\n    /**\n     * Add localisation to JediValidate\n     * @public\n     * @param {string} sourceText - text on english\n     * @param {string} translatedText - text on needed language\n     * @param {string} language - language\n     */\n    addToDictionary(sourceText, translatedText, language) {\n        this.dictionary.addTranslation(sourceText, translatedText, language);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/dmitriytat/jedi-validate/src/jedi-validate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "class",
    "name": "JediValidate",
    "memberof": "src/jedi-validate.js",
    "static": true,
    "longname": "src/jedi-validate.js~JediValidate",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/jedi-validate.js",
    "importStyle": "JediValidate",
    "description": "JediValidate - validation",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "fields",
    "memberof": "src/jedi-validate.js~JediValidate",
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#fields",
    "access": "private",
    "description": "Object with fields",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, Element>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "inputs",
    "memberof": "src/jedi-validate.js~JediValidate",
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#inputs",
    "access": "private",
    "description": "Object with inputs nodes",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, HTMLInputElement|HTMLSelectElement|Array>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "messages",
    "memberof": "src/jedi-validate.js~JediValidate",
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#messages",
    "access": "private",
    "description": "Object with message nodes",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, Element>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "errorMessages",
    "memberof": "src/jedi-validate.js~JediValidate",
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#errorMessages",
    "access": "private",
    "description": "Object with error message",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, Object.<string, string>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "data",
    "memberof": "src/jedi-validate.js~JediValidate",
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#data",
    "access": "private",
    "description": "Object with error message",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "methods",
    "memberof": "src/jedi-validate.js~JediValidate",
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#methods",
    "access": "private",
    "description": "Validate methods",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, {func: Function, message: string}>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "options",
    "memberof": "src/jedi-validate.js~JediValidate",
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#options",
    "access": "private",
    "description": "Validator options",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "{ajax: {url: string, enctype: string, sendType: string, method: string}, rules: {}, messages: {}, containers: {parent: string, message: string, baseMessage: string}, states: {error: string, valid: string, pristine: string, dirty: string}, formStatePrefix: string, callbacks: {success: function, error: function}, clean: boolean, redirect: boolean, language: string, translations: {}}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "rules",
    "memberof": "src/jedi-validate.js~JediValidate",
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#rules",
    "access": "private",
    "description": "Validator rules",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "dictionary",
    "memberof": "src/jedi-validate.js~JediValidate",
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#dictionary",
    "access": "private",
    "description": "Translation dictionary",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "Dictionary"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "nodes",
    "memberof": "src/jedi-validate.js~JediValidate",
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#nodes",
    "access": "private",
    "description": "Elements",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "root",
    "memberof": "src/jedi-validate.js~JediValidate",
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#root",
    "access": "private",
    "description": "Root element",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/jedi-validate.js~JediValidate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#constructor",
    "access": "public",
    "description": "JediValidate",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": "element which wrap form element"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "object with options"
      }
    ]
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "ready",
    "memberof": "src/jedi-validate.js~JediValidate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#ready",
    "access": "private",
    "description": "Ready",
    "lineNumber": 159,
    "params": [],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "handleInputChange",
    "memberof": "src/jedi-validate.js~JediValidate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#handleInputChange",
    "access": "private",
    "description": "Handle input change",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "handleInputInput",
    "memberof": "src/jedi-validate.js~JediValidate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#handleInputInput",
    "access": "private",
    "description": "Handle input",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "handleSubmit",
    "memberof": "src/jedi-validate.js~JediValidate",
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#handleSubmit",
    "access": "private",
    "description": "Handle form submit",
    "lineNumber": 276,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "translate",
    "memberof": "src/jedi-validate.js~JediValidate",
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#translate",
    "access": "private",
    "description": "Translate",
    "lineNumber": 336,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "text to translate"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "send",
    "memberof": "src/jedi-validate.js~JediValidate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#send",
    "access": "private",
    "description": "Send form",
    "lineNumber": 348,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "object with options for sending"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.url",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.enctype",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.sendType",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.method",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string",
          "FormData"
        ],
        "spread": false,
        "optional": false,
        "name": "options.data",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "collect",
    "memberof": "src/jedi-validate.js~JediValidate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#collect",
    "access": "public",
    "description": "Collect data",
    "lineNumber": 406,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "field"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "addMethod",
    "memberof": "src/jedi-validate.js~JediValidate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#addMethod",
    "access": "public",
    "description": "Add rule to validator",
    "lineNumber": 447,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": "rule name"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "function"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "error message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "addToDictionary",
    "memberof": "src/jedi-validate.js~JediValidate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jedi-validate.js~JediValidate#addToDictionary",
    "access": "public",
    "description": "Add localisation to JediValidate",
    "lineNumber": 467,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceText",
        "description": "text on english"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "translatedText",
        "description": "text on needed language"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "language"
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/lib/ajax.js",
    "content": "/**\n * Sending request\n * @param {Object} options - Sending options\n * @param {string} options.url\n * @param {string} options.enctype - Sending options\n * @param {string} options.sendType - Sending options\n * @param {string} options.method - Sending options\n * @param {string|FormData} options.data - Sending options\n * @param {function} translate\n * @returns {Promise}\n * todo rewrite to fetch\n */\nexport function ajax(options, translate) {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n\n        xhr.open(options.method, options.url + (options.method.toUpperCase() === 'GET' ? (`?${options.data}`) : ''), true);\n\n        if (options.sendType === 'serialize') {\n            xhr.setRequestHeader('Content-type', options.enctype);\n        } else if (options.sendType === 'json') {\n            xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n        }\n\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    let response = {};\n\n                    try {\n                        response = JSON.parse(xhr.responseText);\n                    } catch (e) {\n                        response.validationErrors = { base: [translate('JSON parsing error')] };\n                    }\n\n                    resolve(response);\n                } else {\n                    reject({\n                        xhr,\n                        method: options.method,\n                        url: options.url,\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                    });\n                }\n            }\n        };\n\n        xhr.send(options.method.toUpperCase() === 'POST' ? options.data : '');\n    });\n}\n\nexport default ajax;\n",
    "static": true,
    "longname": "/home/travis/build/dmitriytat/jedi-validate/src/lib/ajax.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "ajax",
    "memberof": "src/lib/ajax.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/ajax.js~ajax",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/ajax.js",
    "importStyle": "{ajax}",
    "description": "Sending request",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}\ntodo rewrite to fetch"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Sending options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.url",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.enctype",
        "description": "Sending options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.sendType",
        "description": "Sending options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.method",
        "description": "Sending options"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "FormData"
        ],
        "spread": false,
        "optional": false,
        "name": "options.data",
        "description": "Sending options"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "translate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "todo rewrite to fetch"
    }
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/lib/convert-data.js",
    "content": "/**\n * Create part url for serialize method\n * @param {string} name\n * @param {object|Array|string} data\n * @returns {string} - part of url\n */\nexport function getQueryPart(name, data) {\n    if (Array.isArray(data)) {\n        return data.reduce((part, value) => part + getQueryPart(`${name}[]`, value), '');\n    } else if (typeof data === 'object') {\n        return Object.keys(data).reduce((part, index) => part + getQueryPart(`${name}[${index}]`, data[index]), '');\n    }\n\n    return `${name}=${encodeURIComponent(data)}&`;\n}\n\n/**\n * Name regexp for conversion to path\n * @type {RegExp}\n */\nconst NAME = /(\\[(\\w*)\\]|\\w*)/gi;\n\n/**\n * Convert name of input to path array\n * @param {string} name - name of input\n * @returns {Array} - path to value in data object\n */\nexport function convertNameToPath(name) {\n    const path = [];\n\n    let matches = NAME.exec(name);\n    while (matches !== null) {\n        if (matches.index === NAME.lastIndex) {\n            NAME.lastIndex += 1;\n        }\n\n        path.push(matches[2] || matches[1]);\n\n        matches = NAME.exec(name);\n    }\n\n    return path;\n}\n\n/**\n * Convert data object to value for sending\n * @param {object} data - data object\n * @param {string} type - type of conversion\n * @returns {string|FormData} - output value\n */\nexport function convertData(data, type) {\n    let convertedData;\n\n    switch (type) {\n        case 'serialize':\n            convertedData = Object.keys(data)\n                .reduce((query, name) => `${query}${getQueryPart(name, data[name])}`, '');\n            return convertedData.length ? convertedData.slice(0, -1) : '';\n        case 'formData':\n            return Object.keys(data).reduce((formData, name) => {\n                if (data[name] instanceof FileList) {\n                    if (data[name].length > 1) {\n                        for (let i = 0; i < data[name].length; i += 1) {\n                            formData.append(`${name}[${i}]`, data[name][i]);\n                        }\n                    } else if (data[name].length === 1) {\n                        formData.append(name, data[name][0]);\n                    }\n                } else if (typeof data[name] === 'object') {\n                    Object.keys(data[name]).forEach(key => formData.append(`${name}[${key}]`, data[name][key]));\n                } else {\n                    formData.append(name, data[name]);\n                }\n\n                return formData;\n            }, new FormData());\n        case 'json':\n        default:\n            return JSON.stringify(data);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/dmitriytat/jedi-validate/src/lib/convert-data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "getQueryPart",
    "memberof": "src/lib/convert-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/convert-data.js~getQueryPart",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/convert-data.js",
    "importStyle": "{getQueryPart}",
    "description": "Create part url for serialize method",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - part of url"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object",
          "Array",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "part of url"
    }
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "NAME",
    "memberof": "src/lib/convert-data.js",
    "static": true,
    "longname": "src/lib/convert-data.js~NAME",
    "access": "public",
    "export": false,
    "importPath": "jedi-validate/src/lib/convert-data.js",
    "importStyle": null,
    "description": "Name regexp for conversion to path",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "convertNameToPath",
    "memberof": "src/lib/convert-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/convert-data.js~convertNameToPath",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/convert-data.js",
    "importStyle": "{convertNameToPath}",
    "description": "Convert name of input to path array",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - path to value in data object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of input"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "path to value in data object"
    }
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "convertData",
    "memberof": "src/lib/convert-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/convert-data.js~convertData",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/convert-data.js",
    "importStyle": "{convertData}",
    "description": "Convert data object to value for sending",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|FormData} - output value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "type of conversion"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "FormData"
      ],
      "spread": false,
      "description": "output value"
    }
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/lib/get-data.js",
    "content": "import deepmerge from 'deepmerge';\n\nimport { convertNameToPath } from './convert-data';\n\n/**\n * Create object by path and value\n * @param {Array} path - path array\n * @param {string|FileList} value - value on input\n * @returns {object} - data object\n */\nexport function createObject(path, value) {\n    const segment = path[0];\n\n    if (!segment || segment.length === 0) {\n        return value;\n    } else if (segment === '[]') {\n        return [createObject(path.slice(1), value)];\n    }\n\n    return { [segment]: createObject(path.slice(1), value) };\n}\n\n/**\n * Get value from data object by path\n * @param {Array} path - value path\n * @param {object} data - data object\n * @returns {string} - value\n */\nexport function getValueByPath(path, data) {\n    return path.reduce((value, segment) => (segment && value ? value[segment] : value), data || '');\n}\n\n/**\n * Get value from data object by name\n * @param {string} name - input name\n * @param {object} data - data object\n */\nexport function getValueByName(name, data) {\n    const path = convertNameToPath(name);\n    return getValueByPath(path, data);\n}\n\n/**\n * Get value from radio group\n * @param {Array} inputs - array of radio inputs\n * @returns {string|Array.<string>} - value of checked input\n */\nexport function getRadioGroupValue(inputs) {\n    const values = [...inputs].map(radio => getInputValue(radio)).filter(Boolean); // eslint-disable-line no-use-before-define, max-len\n\n    return values.length > 1 ? values : values[0];\n}\n\n/**\n * Get value form input\n * @param {Element|HTMLInputElement|HTMLSelectElement|Array} input - input\n * @returns {string|Date|FileList|Array} - value of input, or array of value if input is select\n */\nexport function getInputValue(input) {\n    if (!input) return '';\n\n    const { type } = input;\n\n    if (Array.isArray(input)) {\n        return getRadioGroupValue(input);\n    }\n\n    switch (type) {\n        case 'select-one':\n            return input.options && input.options[input.selectedIndex] ? input.options[input.selectedIndex].value : '';\n        case 'select-multiple':\n            return [...input.options].filter(option => option.selected).map(option => option.value);\n        case 'checkbox':\n        case 'radio':\n            return input.checked ? input.value : '';\n        case 'file':\n            return input.files;\n        case 'date':\n            return input.value ? new Date(input.value) : '';\n        default:\n            return input.value;\n    }\n}\n\n/**\n * Get name from input or array of inputs\n * @param {HTMLInputElement|Array} input - input element or Array of HTMLInputElements\n * @returns {string} - input name\n */\nexport function getInputName(input) {\n    return Array.isArray(input) ? input[0].name : input.name;\n}\n\n/**\n * Get object which key is name of input and value is value of input\n * @param {HTMLInputElement|Array} input - input element or Array of HTMLInputElements\n * @returns {object} - data\n */\nexport function getInputData(input) {\n    const value = getInputValue(input);\n    const name = getInputName(input);\n    const path = convertNameToPath(name);\n\n    return createObject(path, value);\n}\n\n/**\n * Get data object with values from inputs object\n * @param {object} inputs - inputs object\n * @returns {object} - data object\n */\nexport function getData(inputs) {\n    return Object.keys(inputs).reduce(\n        (data, name) => deepmerge(data, getInputData(inputs[name])),\n        {},\n    );\n}\n",
    "static": true,
    "longname": "/home/travis/build/dmitriytat/jedi-validate/src/lib/get-data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "createObject",
    "memberof": "src/lib/get-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/get-data.js~createObject",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/get-data.js",
    "importStyle": "{createObject}",
    "description": "Create object by path and value",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - data object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "path array"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "FileList"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value on input"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "data object"
    }
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "getValueByPath",
    "memberof": "src/lib/get-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/get-data.js~getValueByPath",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/get-data.js",
    "importStyle": "{getValueByPath}",
    "description": "Get value from data object by path",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "value path"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "value"
    }
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "getValueByName",
    "memberof": "src/lib/get-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/get-data.js~getValueByName",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/get-data.js",
    "importStyle": "{getValueByName}",
    "description": "Get value from data object by name",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "input name"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data object"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "getRadioGroupValue",
    "memberof": "src/lib/get-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/get-data.js~getRadioGroupValue",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/get-data.js",
    "importStyle": "{getRadioGroupValue}",
    "description": "Get value from radio group",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|Array.<string>} - value of checked input"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "array of radio inputs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "Array.<string>"
      ],
      "spread": false,
      "description": "value of checked input"
    }
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "getInputValue",
    "memberof": "src/lib/get-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/get-data.js~getInputValue",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/get-data.js",
    "importStyle": "{getInputValue}",
    "description": "Get value form input",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|Date|FileList|Array} - value of input, or array of value if input is select"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element",
          "HTMLInputElement",
          "HTMLSelectElement",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "input"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "Date",
        "FileList",
        "Array"
      ],
      "spread": false,
      "description": "value of input, or array of value if input is select"
    }
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "getInputName",
    "memberof": "src/lib/get-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/get-data.js~getInputName",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/get-data.js",
    "importStyle": "{getInputName}",
    "description": "Get name from input or array of inputs",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - input name"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "input element or Array of HTMLInputElements"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "input name"
    }
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "getInputData",
    "memberof": "src/lib/get-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/get-data.js~getInputData",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/get-data.js",
    "importStyle": "{getInputData}",
    "description": "Get object which key is name of input and value is value of input",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - data"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "input element or Array of HTMLInputElements"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "data"
    }
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "getData",
    "memberof": "src/lib/get-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/get-data.js~getData",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/get-data.js",
    "importStyle": "{getData}",
    "description": "Get data object with values from inputs object",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - data object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "inputs object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "data object"
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "src/lib/get-options.js",
    "content": "/**\n * Get ajax options from form\n * @param {HTMLFormElement} form - form element\n * @returns {{ajax: {url: string, method: string, enctype: string, sendType: *}}} - options\n */\nexport function getFormOptions(form) {\n    const enctype = form.getAttribute('enctype');\n\n    return {\n        ajax: {\n            enctype,\n            url: form.getAttribute('action'),\n            method: form.getAttribute('method'),\n            sendType: enctype === 'multipart/form-data' ? 'formData' : undefined,\n        },\n    };\n}\n\n/**\n * Get validate options from input attribute of className\n * @param {HTMLInputElement|HTMLSelectElement} input - input for validation\n * @returns {object} - rules\n */\nexport function getInputRules(input) {\n    const defaultRules = ['required', 'email', 'tel', 'url'];\n\n    const rules = defaultRules.reduce((inputRules, rule) => {\n        const newRules = {};\n        const newRule = input.hasAttribute(rule) || input.type === rule || input.classList.contains(rule); // eslint-disable-line max-len\n\n        if (newRule) {\n            newRules[rule] = newRule;\n        }\n\n        return {\n            ...inputRules,\n            ...newRules,\n        };\n    }, {});\n\n    const regexp = input.hasAttribute('pattern') ? new RegExp(input.getAttribute('pattern')) : undefined;\n    const step = input.hasAttribute('step') ? parseInt(input.getAttribute('step'), 10) : undefined;\n\n    if (input.type === 'date') {\n        const min = input.hasAttribute('min') ? new Date(input.getAttribute('min')) : undefined;\n        const max = input.hasAttribute('max') ? new Date(input.getAttribute('max')) : undefined;\n        if (min) rules.minDate = min;\n        if (max) rules.maxDate = max;\n    } else {\n        const min = input.hasAttribute('min') ? parseInt(input.getAttribute('min'), 10) : undefined;\n        const max = input.hasAttribute('max') ? parseInt(input.getAttribute('max'), 10) : undefined;\n        if (min) rules.min = min;\n        if (max) rules.max = max;\n    }\n\n    if (regexp) rules.regexp = regexp;\n    if (step) rules.step = step;\n\n    return rules;\n}\n",
    "static": true,
    "longname": "/home/travis/build/dmitriytat/jedi-validate/src/lib/get-options.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "getFormOptions",
    "memberof": "src/lib/get-options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/get-options.js~getFormOptions",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/get-options.js",
    "importStyle": "{getFormOptions}",
    "description": "Get ajax options from form",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{ajax: {url: string, method: string, enctype: string, sendType: *}}} - options"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLFormElement"
        ],
        "spread": false,
        "optional": false,
        "name": "form",
        "description": "form element"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{ajax: {url: string, method: string, enctype: string, sendType: *}}"
      ],
      "spread": false,
      "description": "options"
    }
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "getInputRules",
    "memberof": "src/lib/get-options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/get-options.js~getInputRules",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/get-options.js",
    "importStyle": "{getInputRules}",
    "description": "Get validate options from input attribute of className",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - rules"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement",
          "HTMLSelectElement"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "input for validation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "rules"
    }
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/lib/methods.js",
    "content": "/**\n * Check value is not empty\n * @param {string|FileList|Array} value\n * @returns {boolean} - true=valid, false=invalid\n */\nexport function required(value) {\n    if (!value) return false;\n    if (value.length !== undefined && value.length === 0) return false;\n    if (typeof value === 'string' && value.trim() === '') return false;\n\n    return true;\n}\n\n/**\n * Test RegExp\n * @param {string} value\n * @param {RegExp} exp - regular expression\n * @returns {boolean} - true == valid, false == invalid\n */\nexport function regexp(value, exp) {\n    return exp.test(value);\n}\n\n/**\n * Check value is email\n * @param {string} value - email\n * @returns {boolean} - true == valid, false == invalid\n */\nexport function email(value) {\n    return /[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value);\n}\n\n/**\n * Check files size less then max\n * @param {FileList} value - FileList\n * @param {number} size - max file size\n * @returns {boolean} - true == valid, false == invalid\n */\nexport function filesize(value, size) {\n    return [...value].reduce((r, file) => file.size < size && r, true);\n}\n\n/**\n * Check files extensions\n * @param {FileList} value - FileList\n * @param {string} extensions - extensions list\n * @returns {boolean} - true == valid, false == invalid\n */\nexport function extension(value, extensions) {\n    return [...value].reduce((r, file) => extensions.indexOf(file.name.split('.').pop()) !== -1 && r, true);\n}\n\n/**\n * Check value is phone\n * @param {string} value - phone\n * @returns {boolean} - true == valid, false == invalid\n */\nexport function tel(value) {\n    return /^([+]+)*[0-9\\x20\\x28\\x29-]{5,20}$/.test(value);\n}\n\n/**\n * Check value is url\n * @param {string} value - url\n * @returns {boolean} - true == valid, false == invalid\n */\nexport function url(value) {\n    return /[-a-zA-Z0-9@:%_+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_+.~#?&//=]*)?/gi.test(value);\n}\n\n/**\n * Check value is greater than min number\n * @param {number} value - number\n * @param {number} number - min number\n * @returns {boolean} - true == valid, false == invalid\n */\nexport function min(value, number) {\n    return number <= value;\n}\n\n/**\n * Check value is less than max number\n * @param {number} value - number\n * @param {number} number - max number\n * @returns {boolean} - true == valid, false == invalid\n */\nexport function max(value, number) {\n    return value <= number;\n}\n\n/**\n * Check value is multiple of number\n * @param {number} value - number\n * @param {number} number - factor\n * @returns {boolean} - true == valid, false == invalid\n */\nexport function step(value, number) {\n    return value % number === 0;\n}\n\n\n/**\n * Check value is greater than min date\n * @param {Date} date - current date\n * @param {Date} mindate - max date\n * @returns {boolean} - true == valid, false == invalid\n */\nexport function minDate(date, mindate) {\n    return mindate <= date;\n}\n\n/**\n * Check date is less than max date\n * @param {Date} date - current date\n * @param {Date} maxdate - max date\n * @returns {boolean} - true == valid, false == invalid\n */\nexport function maxDate(date, maxdate) {\n    return date <= maxdate;\n}\n\n\nexport default {\n    required: {\n        func: required,\n        message: 'This field is required',\n    },\n    regexp: {\n        func: regexp,\n        message: 'Please, provide correct value',\n    },\n    email: {\n        func: email,\n        message: 'This email is incorrect',\n    },\n    filesize: {\n        func: filesize,\n        message: 'This file is too large',\n    },\n    extension: {\n        func: extension,\n        message: 'This extension is not supported',\n    },\n    tel: {\n        func: tel,\n        message: 'This phone number is incorrect',\n    },\n    url: {\n        func: url,\n        message: 'Wrong url',\n    },\n    min: {\n        func: min,\n        message: 'This number is too less',\n    },\n    max: {\n        func: max,\n        message: 'This number is too large',\n    },\n    step: {\n        func: step,\n        message: 'This value is not a multiple of the specified step value',\n    },\n    minDate: {\n        func: minDate,\n        message: 'This date is too early',\n    },\n    maxDate: {\n        func: maxDate,\n        message: 'This date is too late',\n    },\n};\n",
    "static": true,
    "longname": "/home/travis/build/dmitriytat/jedi-validate/src/lib/methods.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "required",
    "memberof": "src/lib/methods.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/methods.js~required",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/methods.js",
    "importStyle": "{required}",
    "description": "Check value is not empty",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true=valid, false=invalid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "FileList",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true=valid, false=invalid"
    }
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "regexp",
    "memberof": "src/lib/methods.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/methods.js~regexp",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/methods.js",
    "importStyle": "{regexp}",
    "description": "Test RegExp",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true == valid, false == invalid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "exp",
        "description": "regular expression"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true == valid, false == invalid"
    }
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "email",
    "memberof": "src/lib/methods.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/methods.js~email",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/methods.js",
    "importStyle": "{email}",
    "description": "Check value is email",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true == valid, false == invalid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "email"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true == valid, false == invalid"
    }
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "filesize",
    "memberof": "src/lib/methods.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/methods.js~filesize",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/methods.js",
    "importStyle": "{filesize}",
    "description": "Check files size less then max",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true == valid, false == invalid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "FileList"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "FileList"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "max file size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true == valid, false == invalid"
    }
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "extension",
    "memberof": "src/lib/methods.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/methods.js~extension",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/methods.js",
    "importStyle": "{extension}",
    "description": "Check files extensions",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true == valid, false == invalid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "FileList"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "FileList"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "extensions",
        "description": "extensions list"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true == valid, false == invalid"
    }
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "tel",
    "memberof": "src/lib/methods.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/methods.js~tel",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/methods.js",
    "importStyle": "{tel}",
    "description": "Check value is phone",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true == valid, false == invalid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "phone"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true == valid, false == invalid"
    }
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "url",
    "memberof": "src/lib/methods.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/methods.js~url",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/methods.js",
    "importStyle": "{url}",
    "description": "Check value is url",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true == valid, false == invalid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "url"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true == valid, false == invalid"
    }
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "min",
    "memberof": "src/lib/methods.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/methods.js~min",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/methods.js",
    "importStyle": "{min}",
    "description": "Check value is greater than min number",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true == valid, false == invalid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "number"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "min number"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true == valid, false == invalid"
    }
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "max",
    "memberof": "src/lib/methods.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/methods.js~max",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/methods.js",
    "importStyle": "{max}",
    "description": "Check value is less than max number",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true == valid, false == invalid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "number"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "max number"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true == valid, false == invalid"
    }
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "step",
    "memberof": "src/lib/methods.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/methods.js~step",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/methods.js",
    "importStyle": "{step}",
    "description": "Check value is multiple of number",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true == valid, false == invalid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "number"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "factor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true == valid, false == invalid"
    }
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "minDate",
    "memberof": "src/lib/methods.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/methods.js~minDate",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/methods.js",
    "importStyle": "{minDate}",
    "description": "Check value is greater than min date",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true == valid, false == invalid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "current date"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "mindate",
        "description": "max date"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true == valid, false == invalid"
    }
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "maxDate",
    "memberof": "src/lib/methods.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/methods.js~maxDate",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/methods.js",
    "importStyle": "{maxDate}",
    "description": "Check date is less than max date",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true == valid, false == invalid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "current date"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "maxdate",
        "description": "max date"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true == valid, false == invalid"
    }
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/lib/utils.js",
    "content": "/**\n * Mark field as invalid\n * @private\n * @param {Element} field\n * @param {Element} message\n * @param {object} classes\n * @param {string} classes.error\n * @param {string} classes.valid\n * @param {Array.<string>} errors\n */\nexport function markError(field, message, { error, valid }, errors) {\n    field.classList.add(error);\n    field.classList.remove(valid);\n\n    message.innerHTML = errors.join(', '); // eslint-disable-line no-param-reassign\n}\n\n/**\n * Mark field as valid\n * @private\n * @param {Element} field\n * @param {Element} message\n * @param {object} classes\n * @param {string} classes.error\n * @param {string} classes.valid\n */\nexport function markValid(field, message, { error, valid }) {\n    field.classList.add(valid);\n    field.classList.remove(error);\n\n    message.innerHTML = ''; // eslint-disable-line no-param-reassign\n}\n\n/**\n * Mark field\n * @private\n * @param {Element} field\n * @param message\n * @param states\n * @param errors\n */\nexport function markField(field, message, states, errors) {\n    if (errors && errors.length) {\n        markError(field, message, states, errors);\n    } else {\n        markValid(field, message, states);\n    }\n}\n\n/**\n * Init error messages\n * @private\n * @param {object} rules\n * @param {object} messages\n * @param {object} methods\n * @returns {Object.<string, Object.<string, string>>}\n */\nexport function initErrorMessages(rules, messages, methods) {\n    return Object.keys(rules).reduce((names, name) => ({\n        ...names,\n        [name]: Object.keys(rules[name]).reduce((ruleNames, method) => ({\n            ...ruleNames,\n            [method]: (messages[name] && messages[name][method]) || (methods[method] && methods[method].message) || '',\n        }), {}),\n    }), {});\n}\n",
    "static": true,
    "longname": "/home/travis/build/dmitriytat/jedi-validate/src/lib/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "markError",
    "memberof": "src/lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils.js~markError",
    "access": "private",
    "export": true,
    "importPath": "jedi-validate/src/lib/utils.js",
    "importStyle": "{markError}",
    "description": "Mark field as invalid",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "classes",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "classes.error",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "classes.valid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "errors",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "markValid",
    "memberof": "src/lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils.js~markValid",
    "access": "private",
    "export": true,
    "importPath": "jedi-validate/src/lib/utils.js",
    "importStyle": "{markValid}",
    "description": "Mark field as valid",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "classes",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "classes.error",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "classes.valid",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "markField",
    "memberof": "src/lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils.js~markField",
    "access": "private",
    "export": true,
    "importPath": "jedi-validate/src/lib/utils.js",
    "importStyle": "{markField}",
    "description": "Mark field",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "states",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "errors",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "initErrorMessages",
    "memberof": "src/lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils.js~initErrorMessages",
    "access": "private",
    "export": true,
    "importPath": "jedi-validate/src/lib/utils.js",
    "importStyle": "{initErrorMessages}",
    "description": "Init error messages",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object.<string, Object.<string, string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "rules",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "messages",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "methods",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object.<string, Object.<string, string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/lib/validate-data.js",
    "content": "import { getValueByName } from './get-data';\n\n/**\n * Check rule for dependencies\n * @param {*} params - params of validation\n * @param {object} data - data of form\n * @returns {*} - params of validation or null if rule not checkable\n */\nexport function isCheckable(params, data) {\n    if (!params) return null;\n\n    let checkable = true;\n    let param = params;\n\n    if (Array.isArray(params)) {\n        let dependencies = [];\n        [param, ...dependencies] = params;\n        if (!param) return null;\n\n        try {\n            checkable = dependencies\n                .reduce((required, dependency) => (required && (typeof dependency === 'function' ? dependency(data) : !!data[dependency])), checkable);\n        } catch (e) {\n            console.warn(`Dependency function error: ${e.toString()}`);\n        }\n    }\n\n    return checkable ? param : null;\n}\n\n/**\n * Validate field\n * @param {object} rules - object with rules for validation\n * @param {object} methods - validation methods\n * @param {string|FileList|Array} value - value of input\n * @param {string} name - name on input\n * @param {object} errorMessages - object with error messages\n * @param {object} data - data of form\n * @param {function} translate - translate function\n * @returns {Array.<string>} - array of field errors\n */\nexport function validateField(rules, methods, value, name, errorMessages, data, translate) {\n    const isEmpty = !methods.required.func(value);\n\n    const isRequired = isCheckable(rules.required, data);\n\n    if (isEmpty && isRequired) {\n        return [translate(errorMessages[name].required)];\n    }\n\n    if (isEmpty) {\n        return [];\n    }\n\n    return Object.keys(rules).reduce((errors, method) => {\n        const params = isCheckable(rules[method], data);\n\n        if (params === null) return errors;\n\n        if (methods[method]) {\n            const valid = methods[method].func(value, params);\n\n            if (!valid) {\n                errors.push(translate(errorMessages[name][method]));\n            }\n        } else {\n            errors.push(`Method \"${method}\" not found`); // todo translation\n        }\n\n        return errors;\n    }, []);\n}\n\n/**\n * Validate data object\n * @param {object} rules - object with rules for validation\n * @param {object} methods - validation methods\n * @param {object} data - data object\n * @param {object} errorMessages - object with error messages\n * @param {function} translate - translate function\n * @returns {object.<string, Array.<string>>} - object of fields error arrays\n */\nexport function validateData(rules, methods, data, errorMessages, translate) {\n    return Object.keys(rules).reduce((obj, name) => {\n        const value = getValueByName(name, data);\n        const errors = validateField(rules[name], methods, value, name, errorMessages, data, translate); // eslint-disable-line max-len\n        return {\n            ...obj,\n            [name]: errors.length ? errors : undefined,\n        };\n    }, {});\n}\n",
    "static": true,
    "longname": "/home/travis/build/dmitriytat/jedi-validate/src/lib/validate-data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "isCheckable",
    "memberof": "src/lib/validate-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/validate-data.js~isCheckable",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/validate-data.js",
    "importStyle": "{isCheckable}",
    "description": "Check rule for dependencies",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} - params of validation or null if rule not checkable"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "params of validation"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data of form"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "params of validation or null if rule not checkable"
    }
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "validateField",
    "memberof": "src/lib/validate-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/validate-data.js~validateField",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/validate-data.js",
    "importStyle": "{validateField}",
    "description": "Validate field",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<string>} - array of field errors"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "rules",
        "description": "object with rules for validation"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "methods",
        "description": "validation methods"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "FileList",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value of input"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name on input"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "errorMessages",
        "description": "object with error messages"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data of form"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "translate",
        "description": "translate function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<string>"
      ],
      "spread": false,
      "description": "array of field errors"
    }
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "validateData",
    "memberof": "src/lib/validate-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/validate-data.js~validateData",
    "access": "public",
    "export": true,
    "importPath": "jedi-validate/src/lib/validate-data.js",
    "importStyle": "{validateData}",
    "description": "Validate data object",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object.<string, Array.<string>>} - object of fields error arrays"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "rules",
        "description": "object with rules for validation"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "methods",
        "description": "validation methods"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data object"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "errorMessages",
        "description": "object with error messages"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "translate",
        "description": "translate function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object.<string, Array.<string>>"
      ],
      "spread": false,
      "description": "object of fields error arrays"
    }
  },
  {
    "kind": "index",
    "content": "# Jedi Validate\n\n[![npm version](https://badge.fury.io/js/jedi-validate.svg)](https://www.npmjs.com/package/jedi-validate)\n[![doc coverage](http://dmitriytat.github.io/jedi-validate/badge.svg)](http://dmitriytat.github.io/jedi-validate/)\n[![Build Status](https://travis-ci.org/dmitriytat/jedi-validate.svg?branch=master)](https://travis-ci.org/dmitriytat/jedi-validate)\n[![Coverage Status](https://coveralls.io/repos/github/dmitriytat/jedi-validate/badge.svg?branch=master)](https://coveralls.io/github/dmitriytat/jedi-validate?branch=master)\n[![Dependencies](https://david-dm.org/dmitriytat/jedi-validate.svg)](https://david-dm.org/dmitriytat/jedi-validate)\n\n* [Introduction & documentation](#intro)\n* [Installation and Usage](#install)\n* [Options](#options)\n  * [Default Options](#default)\n  * [Ajax Parameters](#ajax)\n  * [Data Encoding Options](#encoding)\n* [Validation Rules](#rules)\n* [Error Message](#error)\n\n\n<h1>\n    <a name=\"intro\"></a>\n    Introduction\n</h1>\n\n\nJedi Validate is a lightweight form validation component.\n\n- [Documentation](http://dmitriytat.github.io/jedi-validate/)\n- [Test coverage](https://coveralls.io/github/dmitriytat/jedi-validate)\n\n## How Can I Use It?\n\nThis is a JS class, and you can create a new instance by passing in a DOM element and an options object.\n\n```javascript\n// npm install jedi-validate\n\n\nimport JediValidate from 'jedi-validate';\n\nconst JediValidate = new JediValidate(document.querySelector('#form5'));\n```\n\n\nBy default, the form will be sent via ajax with the parameters which were set in HTML.\n\n## Why Should I Use It?\n\nBecause it provides a strict json format for interaction. You can send a form in many different ways:\n\n* serialized\n* as a JSON object\n* as FormData.\n\nBut server answer always has one structure. It is easier to implement.\n\n<h2>\n    <a name=\"install\"></a>\n    Build and Test\n</h2>\n\nIf you would like to build the source code, run tests, or contribute, then first fork or clone this repo onto your local machine. Ensure NodeJS is installed and in turn npm. Check in a terminal with `node -v` and `npm -v`.\n\nTo install project dependencies first run,\n\n```\nnpm install\n```\n\n### Build\nTo build the source and watch for changes in the terminal run,\n\n```\nnpm run build\n```\n\n### Build and Serve\nTo bundle the source and serve it to `localhost:4000` run,\n\n```\nnpm run dev\n```\nThis will open a webpack local server where you can navigate to the desired directory or resource. The test page is located in **`example/bootstrap.html`**\n\n### Running Tests\nThe tests are not yet complete, and runtime errors will occur when attempting to run the tests in the console or through the test browser.\n\n<h1>\n    <a name=\"options\"></a>\n    Options\n</h1>\n\nThere are three types of options:\n\n* Default component options\n* Form attributes such as action or method\n* Initialization options\n\n<h2>\n   <a name=\"default\"></a>\n   Default Options\n</h2>\n\n\n```javascript\n    {\n        ajax: {\n            url: null,\n            enctype: 'application/x-www-form-urlencoded',\n            sendType: 'serialize', // 'formData', 'json'\n            method: 'GET'\n        },\n        rules: {},\n        messages: {},\n        containers: {\n            parent: 'form-group',\n            message: 'help-block',\n            baseMessage: 'base-error'\n        },\n        states: {\n            error: 'error',\n            valid: 'valid',\n            pristine: 'pristine',\n            dirty: 'dirty'\n        },\n        callbacks: {\n            success: function () {\n            },\n            error: function () {\n            }\n        },\n        clean: true,\n        redirect: true\n    }\n```\n\n<h2>\n  <a name=\"ajax\"></a>\n  ajax\n</h2>\n\nUnder the ajax option we define how to send the form.\nIt can be ```null``` if we do not want the form to be sent,\nor it can be an object with the following options:\n\n#### url\ndefault: ```null```\nCan be overridden by the `action` form attribute or init options.\n\n#### enctype\ndefault: ```'application/x-www-form-urlencoded'```\nCan be overridden by the `enctype` form attribute, init options, or `sendType`.\n\n#### method\ndefault: ```'GET'```\nCan be overridden by the `method` form attribute or init options.\n\n<a name=\"encoding\"></a>\n#### sendType\ndefault: ```'serialize'```\n\nYou can encode and send the data in three different ways. Valid options are:\n\n* ```'formData'``` - send form as FormData. ```'Content-type'``` to ```'multipart/form-data'```\n* ```'json'``` - send form as a JSON object. Set ```'Content-type'``` to ```'application/json; charset=utf-8'```\n* ```'serialize'``` - send form as a regular request. Set ```'Content-type'``` to ```'application/x-www-form-urlencoded'```\n\nFiles can only be sent using 'formData' encoding.\n\n#### serialize\n\n```\n    name=111&phone=222222222&email=wow%40wow.com\n```\n\n#### formData\n\n```\n-----------------------------678106150613000712676411464\nContent-Disposition: form-data; name=\"name\"\n\n111\n-----------------------------678106150613000712676411464\nContent-Disposition: form-data; name=\"phone\"\n\n222222222\n-----------------------------678106150613000712676411464\nContent-Disposition: form-data; name=\"email\"\n...\n```\n\n#### json\n\n```json\n    {\"name\":\"111\",\"phone\":\"222222222\",\"email\":\"wow@wow.com\",\"file\":\"index.html\"}\n```\n\n<h1>\n  <a name=\"rules\"></a>\n  Validation Rules\n</h1>\n\nRules used to validate input. Each form element will be matched by the 'name' attribute with a corresponding rule, if one exists. If no rule exists, then no validation will occur.\n\n#### Basic Rules:\n\nRules are not defined by default, but they can be set via attributes or classes in HTML, or in the init options.\n\n> - required :  boolean\n> - regexp : RegExp\n> - email :  boolean\n> - tel :  boolean\n> - url :  boolean\n> - filesize: number\n> - extension: string\n\nThese attributes can be used\n> - type - email, tel or url (regexp will be used for each type)\n> - pattern - regexp with attribute value\n> - required - check input for empty value\n\nExample:\n\n```html\n    <input id=\"name\" type=\"text\" name=\"name\" required class=\"required\">\n    <input id=\"email\" type=\"email\" name=\"email\" class=\"required\">\n```\n\n* type=\"email\" or class=\"email\" to validate as email\n* required or class=\"required\" to validate as a required field\n\n#### Custom Validation Rules\n\nYou can set your own rules using the ```addMethod``` function:\n\n```\nJediValidate.addMethod('methodName', function (value, options) {\n    return // true if valid\n}, 'Error message');\n```\n\n### Initialization Options Example\n\nAdd rules as part of your options object when initializing:\n\n```javascript\n    const validator = new JediValidate(formWrapper, {\n        rules: {\n            name: {\n                required: true\n            },\n            email: {\n                email: true\n            },\n            phone: {\n                regexp: /^([\\+]+)*[0-9\\x20\\x28\\x29\\-]{5,20}$/\n            },\n            file: {\n                filesize: 10000,\n                extension: \"html|css|txt\"\n            }\n            file2: {\n                filesize: [10000, \"two-files-checkbox\"], // check only if checkbox checked\n                extension: [\"html|css|txt\", \"two-files-checkbox\"], // without recollect by default\n                another: ['param', function(oldData) {\n                   const newData = validator.collect('two-files-checkbox'); // manual data recollect for concrete field\n                   return !!newData['two-files-checkbox'];\n               }];\n            }\n        }\n    });\n```\n\nYou can recollect data of all form or just input by name. Method return new data.\n\n```\nvalidator.collect(); // all form\nvalidator.collect('two-files-checkbox'); // one field\n```\n\n\n<h1>\n  <a name=\"error\"></a>\n  Error Messages\n</h1>\n\nYou can define your own error messages in case validation fails. In case a form element fails validation, then the message corresponding to the element's 'name' attribute will apply.\n\n```javascript\n    messages: {\n        phone: {\n            regexp: \"Invalid phone number\"\n        },\n        file: {\n            filesize: \"File is too big\"\n        }\n    },\n```\n",
    "longname": "/home/travis/build/dmitriytat/jedi-validate/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n    \"name\": \"jedi-validate\",\n    \"version\": \"1.4.0\",\n    \"description\": \"A lightweight form validation component\",\n    \"main\": \"./dist/jedi-validate.js\",\n    \"scripts\": {\n        \"prestart\": \"rimraf ./dist\",\n        \"start\": \"webpack-dev-server --hot --inline --progress --colors --watch --port 4000\",\n        \"prebuild\": \"npm run esdoc && rimraf ./dist\",\n        \"build\": \"cross-env NODE_ENV=production webpack --progress --colors\",\n        \"lint\": \"eslint src/**/*.js\",\n        \"fix\": \"eslint src/**/*.js --fix\",\n        \"fix-tests\": \"eslint tests/**/*.js --fix\",\n        \"preesdoc\": \"rimraf ./docs\",\n        \"esdoc\": \"esdoc -c esdoc.json\",\n        \"test\": \"cross-env NODE_ENV=test karma start --single-run\",\n        \"tests\": \"cross-env NODE_ENV=test karma start\"\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/dmitriytat/jedi-validate.git\"\n    },\n    \"keywords\": [\n        \"form\",\n        \"validation\",\n        \"formdata\"\n    ],\n    \"author\": \"Dmitriy Tatarintsev <tatarintsevd@gmail.com>\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/dmitriytat/jedi-validate/issues\"\n    },\n    \"homepage\": \"https://github.com/dmitriytat/jedi-validate#readme\",\n    \"devDependencies\": {\n        \"@types/chai\": \"^4.0.4\",\n        \"@types/mocha\": \"^2.2.43\",\n        \"@types/should\": \"^11.2.0\",\n        \"@types/sinon\": \"^2.3.5\",\n        \"babel-core\": \"^6.26.0\",\n        \"babel-eslint\": \"^8.0.1\",\n        \"babel-loader\": \"^7.1.2\",\n        \"babel-minify-webpack-plugin\": \"^0.2.0\",\n        \"babel-plugin-istanbul\": \"^4.1.5\",\n        \"babel-plugin-transform-class-properties\": \"^6.24.1\",\n        \"babel-preset-es2015\": \"^6.24.1\",\n        \"babel-preset-stage-3\": \"^6.24.1\",\n        \"bootstrap\": \"^3.3.7\",\n        \"chai\": \"^4.1.2\",\n        \"compression-webpack-plugin\": \"^1.0.1\",\n        \"cross-env\": \"^5.0.5\",\n        \"esdoc\": \"^1.0.3\",\n        \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n        \"esdoc-standard-plugin\": \"^1.0.0\",\n        \"eslint\": \"^4.8.0\",\n        \"eslint-config-airbnb\": \"^16.0.0\",\n        \"eslint-loader\": \"^1.9.0\",\n        \"eslint-plugin-import\": \"^2.7.0\",\n        \"eslint-plugin-jsx-a11y\": \"^6.0.2\",\n        \"eslint-plugin-react\": \"^7.4.0\",\n        \"extract-text-webpack-plugin\": \"^3.0.1\",\n        \"json-loader\": \"^0.5.7\",\n        \"karma\": \"^1.7.1\",\n        \"karma-chai\": \"^0.1.0\",\n        \"karma-chrome-launcher\": \"^2.2.0\",\n        \"karma-coverage\": \"^1.1.1\",\n        \"karma-coveralls\": \"^1.1.2\",\n        \"karma-mocha\": \"^1.3.0\",\n        \"karma-mocha-reporter\": \"^2.2.4\",\n        \"karma-webpack\": \"2.0.5\",\n        \"mocha\": \"^4.0.1\",\n        \"rimraf\": \"^2.6.2\",\n        \"should\": \"^13.1.2\",\n        \"sinon\": \"^4.0.1\",\n        \"webpack\": \"^3.6.0\",\n        \"webpack-dev-server\": \"^2.9.1\"\n    },\n    \"dependencies\": {\n        \"deepmerge\": \"^2.0.0\"\n    }\n}\n",
    "longname": "/home/travis/build/dmitriytat/jedi-validate/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]